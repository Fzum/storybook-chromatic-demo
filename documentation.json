{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-20260b860fbbb7e01561a7cb28a8e7c212218a8717ea61d6b0e869183ebecf2ac35841c741d3b9e22329f9b990e678ea6bbcd7a895a57de5c7fef969d66788f1",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'storybook-chromatic-demo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  imports: [],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'storybook-chromatic-demo';\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<h1>\n  Hello world!\n</h1>\n"
        },
        {
            "name": "BadgeComponent",
            "id": "component-BadgeComponent-3c3aefb41b91ca300d64ea04e242ac22125832dc9b25bb80392bed30ae45387b57c468ab587bf29dbe2a1c737f91f62d6935653c8d55f6ec5061d9dd3e55b2f1",
            "file": "src/ui-components/badge/badge.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-badge",
            "styleUrls": [],
            "styles": [
                "\n    span {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 9999px;\n      font-weight: 500;\n      line-height: 1;\n      font-family: sans-serif;\n      white-space: nowrap;\n    }\n\n    .success {\n      background-color: #10B981;\n      color: white;\n    }\n\n    .warning {\n      background-color: #F59E0B;\n      color: white;\n    }\n\n    .error {\n      background-color: #EF4444;\n      color: white;\n    }\n\n    .info {\n      background-color: #3B82F6;\n      color: white;\n    }\n\n    .default {\n      background-color: #9CA3AF;\n      color: white;\n    }\n\n    .small {\n      padding: 0.125rem 0.5rem;\n      font-size: 0.625rem;\n    }\n\n    .medium {\n      padding: 0.25rem 0.75rem;\n      font-size: 0.75rem;\n    }\n\n    .large {\n      padding: 0.375rem 1rem;\n      font-size: 0.875rem;\n    }\n  "
            ],
            "template": "<span\n  [ngClass]=\"getBadgeClasses()\"\n  [style.backgroundColor]=\"backgroundColor()\"\n>\n  {{ label() }}\n</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "input<string | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>What background color to use (overrides variant color)</p>\n",
                    "line": 75,
                    "rawdescription": "\nWhat background color to use (overrides variant color)"
                },
                {
                    "name": "label",
                    "defaultValue": "input('Badge')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Badge contents</p>\n",
                    "line": 81,
                    "rawdescription": "\nBadge contents"
                },
                {
                    "name": "size",
                    "defaultValue": "input<'small' | 'medium' | 'large'>('medium')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>How large should the badge be?</p>\n",
                    "line": 78,
                    "rawdescription": "\nHow large should the badge be?"
                },
                {
                    "name": "variant",
                    "defaultValue": "input<'default' | 'success' | 'warning' | 'error' | 'info'>('default')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>The variant/type of the badge</p>\n",
                    "line": 72,
                    "rawdescription": "\nThe variant/type of the badge"
                }
            ],
            "methodsClass": [
                {
                    "name": "getBadgeClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input } from '@angular/core';\n\n@Component({\n  selector: 'ui-badge',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <span\n      [ngClass]=\"getBadgeClasses()\"\n      [style.backgroundColor]=\"backgroundColor()\"\n    >\n      {{ label() }}\n    </span>\n  `,\n  styles: [`\n    span {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 9999px;\n      font-weight: 500;\n      line-height: 1;\n      font-family: sans-serif;\n      white-space: nowrap;\n    }\n\n    .success {\n      background-color: #10B981;\n      color: white;\n    }\n\n    .warning {\n      background-color: #F59E0B;\n      color: white;\n    }\n\n    .error {\n      background-color: #EF4444;\n      color: white;\n    }\n\n    .info {\n      background-color: #3B82F6;\n      color: white;\n    }\n\n    .default {\n      background-color: #9CA3AF;\n      color: white;\n    }\n\n    .small {\n      padding: 0.125rem 0.5rem;\n      font-size: 0.625rem;\n    }\n\n    .medium {\n      padding: 0.25rem 0.75rem;\n      font-size: 0.75rem;\n    }\n\n    .large {\n      padding: 0.375rem 1rem;\n      font-size: 0.875rem;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BadgeComponent {\n  /** The variant/type of the badge */\n  variant = input<'default' | 'success' | 'warning' | 'error' | 'info'>('default');\n\n  /** What background color to use (overrides variant color) */\n  backgroundColor = input<string | undefined>(undefined);\n\n  /** How large should the badge be? */\n  size = input<'small' | 'medium' | 'large'>('medium');\n\n  /** Badge contents */\n  label = input('Badge');\n\n  getBadgeClasses(): { [key: string]: boolean } {\n    return {\n      'success': this.variant() === 'success',\n      'warning': this.variant() === 'warning',\n      'error': this.variant() === 'error',\n      'info': this.variant() === 'info',\n      'default': this.variant() === 'default',\n      'small': this.size() === 'small',\n      'medium': this.size() === 'medium',\n      'large': this.size() === 'large'\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    span {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 9999px;\n      font-weight: 500;\n      line-height: 1;\n      font-family: sans-serif;\n      white-space: nowrap;\n    }\n\n    .success {\n      background-color: #10B981;\n      color: white;\n    }\n\n    .warning {\n      background-color: #F59E0B;\n      color: white;\n    }\n\n    .error {\n      background-color: #EF4444;\n      color: white;\n    }\n\n    .info {\n      background-color: #3B82F6;\n      color: white;\n    }\n\n    .default {\n      background-color: #9CA3AF;\n      color: white;\n    }\n\n    .small {\n      padding: 0.125rem 0.5rem;\n      font-size: 0.625rem;\n    }\n\n    .medium {\n      padding: 0.25rem 0.75rem;\n      font-size: 0.75rem;\n    }\n\n    .large {\n      padding: 0.375rem 1rem;\n      font-size: 0.875rem;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-0eee4c02316b807d926cda58d507af056dc37bc567a7e9bf847a668658ee423d9cb5a9c8c17585e6f3017daa1feab374309b1902820c3f2b2f857a2140b59c21",
            "file": "src/ui-components/button/button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ui-button",
            "styleUrls": [],
            "styles": [
                "\n    button {\n      display: inline-block;\n      cursor: pointer;\n      border-radius: 9999px;\n      font-weight: bold;\n      line-height: 1;\n      font-family: sans-serif;\n    }\n\n    .primary {\n      background-color: #2563eb;\n      color: white;\n    }\n\n    .secondary {\n      background-color: transparent;\n      color: #1f2937;\n      box-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);\n    }\n\n    .small {\n      padding: 0.625rem 1rem;\n      font-size: 0.75rem;\n    }\n\n    .medium {\n      padding: 0.75rem 1.25rem;\n      font-size: 0.875rem;\n    }\n\n    .large {\n      padding: 0.875rem 1.5rem;\n      font-size: 1rem;\n    }\n  "
            ],
            "template": "<button\n  type=\"button\"\n  (click)=\"handleClick($event)\"\n  [ngClass]=\"getButtonClasses()\"\n  [style.backgroundColor]=\"backgroundColor()\"\n>\n  {{ label() }}\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 58,
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "required": false
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Optional click handler</p>\n",
                    "line": 70,
                    "rawdescription": "\nOptional click handler",
                    "required": false
                }
            ],
            "propertiesClass": [
                {
                    "name": "backgroundColor",
                    "defaultValue": "input<string | undefined>(undefined)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>What background color to use</p>\n",
                    "line": 61,
                    "rawdescription": "\nWhat background color to use"
                },
                {
                    "name": "clicked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Optional click handler</p>\n",
                    "line": 70,
                    "rawdescription": "\nOptional click handler",
                    "required": false
                },
                {
                    "name": "label",
                    "defaultValue": "input('Button')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Button contents</p>\n",
                    "line": 67,
                    "rawdescription": "\nButton contents"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 58,
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "required": false
                },
                {
                    "name": "size",
                    "defaultValue": "input<'small' | 'medium' | 'large'>('medium')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 64,
                    "rawdescription": "\nHow large should the button be?"
                }
            ],
            "methodsClass": [
                {
                    "name": "getButtonClasses",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, input, output } from '@angular/core';\n\n@Component({\n  selector: 'ui-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <button\n      type=\"button\"\n      (click)=\"handleClick($event)\"\n      [ngClass]=\"getButtonClasses()\"\n      [style.backgroundColor]=\"backgroundColor()\"\n    >\n      {{ label() }}\n    </button>\n  `,\n  styles: [`\n    button {\n      display: inline-block;\n      cursor: pointer;\n      border-radius: 9999px;\n      font-weight: bold;\n      line-height: 1;\n      font-family: sans-serif;\n    }\n\n    .primary {\n      background-color: #2563eb;\n      color: white;\n    }\n\n    .secondary {\n      background-color: transparent;\n      color: #1f2937;\n      box-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);\n    }\n\n    .small {\n      padding: 0.625rem 1rem;\n      font-size: 0.75rem;\n    }\n\n    .medium {\n      padding: 0.75rem 1.25rem;\n      font-size: 0.875rem;\n    }\n\n    .large {\n      padding: 0.875rem 1.5rem;\n      font-size: 1rem;\n    }\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  primary = input(false);\n\n  /** What background color to use */\n  backgroundColor = input<string | undefined>(undefined);\n\n  /** How large should the button be? */\n  size = input<'small' | 'medium' | 'large'>('medium');\n\n  /** Button contents */\n  label = input('Button');\n\n  /** Optional click handler */\n  clicked = output<Event>();\n\n  getButtonClasses(): { [key: string]: boolean } {\n    return {\n      'primary': this.primary(),\n      'secondary': !this.primary(),\n      'small': this.size() === 'small',\n      'medium': this.size() === 'medium',\n      'large': this.size() === 'large'\n    };\n  }\n\n  handleClick(event: Event): void {\n    this.clicked.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    button {\n      display: inline-block;\n      cursor: pointer;\n      border-radius: 9999px;\n      font-weight: bold;\n      line-height: 1;\n      font-family: sans-serif;\n    }\n\n    .primary {\n      background-color: #2563eb;\n      color: white;\n    }\n\n    .secondary {\n      background-color: transparent;\n      color: #1f2937;\n      box-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);\n    }\n\n    .small {\n      padding: 0.625rem 1rem;\n      font-size: 0.75rem;\n    }\n\n    .medium {\n      padding: 0.75rem 1.25rem;\n      font-size: 0.875rem;\n    }\n\n    .large {\n      padding: 0.875rem 1.5rem;\n      font-size: 1rem;\n    }\n  \n",
            "extends": []
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 34,
        "status": "medium",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/ui-components/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BadgeComponent",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/ui-components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 70,
                "coverageCount": "7/10",
                "status": "good"
            }
        ]
    }
}